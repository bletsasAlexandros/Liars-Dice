[{"C:\\Users\\Alexandros\\Desktop\\vsCode projects\\liardice\\client\\src\\index.tsx":"1","C:\\Users\\Alexandros\\Desktop\\vsCode projects\\liardice\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\Alexandros\\Desktop\\vsCode projects\\liardice\\client\\src\\App.tsx":"3","C:\\Users\\Alexandros\\Desktop\\vsCode projects\\liardice\\client\\src\\chat.tsx":"4"},{"size":500,"mtime":1608213777975,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1608213777975,"results":"7","hashOfConfig":"6"},{"size":1108,"mtime":1608450556278,"results":"8","hashOfConfig":"6"},{"size":1515,"mtime":1608382732712,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"yec2oe",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"C:\\Users\\Alexandros\\Desktop\\vsCode projects\\liardice\\client\\src\\index.tsx",[],["20","21"],"C:\\Users\\Alexandros\\Desktop\\vsCode projects\\liardice\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\Alexandros\\Desktop\\vsCode projects\\liardice\\client\\src\\App.tsx",["22","23","24"],"C:\\Users\\Alexandros\\Desktop\\vsCode projects\\liardice\\client\\src\\chat.tsx",["25","26","27"],"import React, {useState, useRef, useEffect, FunctionComponent} from 'react';\r\nimport {socket} from './App';\r\n\r\ninterface ChatProps {\r\n    avatarUser: string ;\r\n}\r\n\r\n\r\nexport const Chat: React.FC<ChatProps> = (props:any) =>{\r\n    interface MyMessage {\r\n        avatar: string,\r\n        message:string\r\n    }\r\n\r\n    const [messages,setMessages] = useState<Array<MyMessage>>([]);\r\n    const [message,setMessage] = useState('');\r\n    const avatar = props.avatarUser;\r\n\r\n    const sendMessage = () =>{\r\n      socket.emit('chat',{avatar:avatar,message:message});\r\n      setMessage(\"\");\r\n      setMessages(prevState=>[...prevState,\r\n        {\r\n            avatar: avatar,\r\n            message: message\r\n        }])\r\n    }\r\n\r\n   \r\n    useEffect(()=>{\r\n        socket.on('chat',(data:MyMessage)=>{\r\n            setMessages(prevState=>[...prevState,\r\n            {\r\n                avatar: data.avatar,\r\n                message: data.message\r\n            }])\r\n        })\r\n    },[])\r\n\r\n    return(\r\n        <div>\r\n            <h6>Chat:</h6>\r\n            <input type=\"text\" placeholder=\"Write Something\" value={message} onChange={e=>setMessage(e.target.value)}></input>\r\n            <button onClick={sendMessage}>Send</button>\r\n            {messages.map((messageUp,index)=>{\r\n                return(\r\n                <div key={`Key_${index}`}>\r\n                    <a>{messageUp.avatar}: {messageUp.message}</a>\r\n                    <br />\r\n                </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":3,"column":26,"nodeType":"34","messageId":"35","endLine":3,"endColumn":32},{"ruleId":"32","severity":1,"message":"36","line":3,"column":45,"nodeType":"34","messageId":"35","endLine":3,"endColumn":62},{"ruleId":"37","severity":1,"message":"38","line":30,"column":7,"nodeType":"39","endLine":30,"endColumn":10},{"ruleId":"32","severity":1,"message":"33","line":1,"column":26,"nodeType":"34","messageId":"35","endLine":1,"endColumn":32},{"ruleId":"32","severity":1,"message":"36","line":1,"column":45,"nodeType":"34","messageId":"35","endLine":1,"endColumn":62},{"ruleId":"37","severity":1,"message":"38","line":48,"column":21,"nodeType":"39","endLine":48,"endColumn":24},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'FunctionComponent' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]