[{"/Users/alex/Documents/Projects/Liars-Dice/client/src/index.tsx":"1","/Users/alex/Documents/Projects/Liars-Dice/client/src/reportWebVitals.ts":"2","/Users/alex/Documents/Projects/Liars-Dice/client/src/App.tsx":"3","/Users/alex/Documents/Projects/Liars-Dice/client/src/chat.tsx":"4","/Users/alex/Documents/Projects/Liars-Dice/client/src/board.tsx":"5","/Users/alex/Documents/Projects/Liars-Dice/client/src/choice.tsx":"6","/Users/alex/Documents/Projects/Liars-Dice/client/src/gameLogic.tsx":"7","/Users/alex/Documents/Projects/Liars-Dice/client/src/dices.tsx":"8"},{"size":500,"mtime":1608758791164,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1608758791165,"results":"11","hashOfConfig":"10"},{"size":1100,"mtime":1609072954049,"results":"12","hashOfConfig":"10"},{"size":1563,"mtime":1608921361122,"results":"13","hashOfConfig":"10"},{"size":2836,"mtime":1609428527247,"results":"14","hashOfConfig":"10"},{"size":3725,"mtime":1609431351961,"results":"15","hashOfConfig":"10"},{"size":1748,"mtime":1609507678603,"results":"16","hashOfConfig":"10"},{"size":304,"mtime":1609407647270,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1442i3t",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"/Users/alex/Documents/Projects/Liars-Dice/client/src/index.tsx",[],["40","41"],"/Users/alex/Documents/Projects/Liars-Dice/client/src/reportWebVitals.ts",[],"/Users/alex/Documents/Projects/Liars-Dice/client/src/App.tsx",["42"],"import './App.css';\nimport {Chat} from './chat'\nimport {Board} from './board';\nimport React, {useState, useEffect} from 'react';\nimport io from \"socket.io-client\";\n\nexport const socket = io(\"http://localhost:4000\");\n\nfunction App() {\n  const [room,setRoom] = useState('Room');\n  const [avatar, setAvatar] = useState('Alex');\n  const [players, setPlayers] = useState<Array<string>>([]);\n\n  const joinRoom = () =>{\n    socket.emit('join-room',{roomName:room, user:avatar});\n    setRoom(\"\")\n  }\n\n  useEffect(()=>{\n    socket.on('join-room',(userInRoom:Array<string>)=>{\n      console.log(userInRoom);\n      setPlayers(userInRoom);\n    })\n  },[])\n\n  return (\n    <div className=\"App\">\n      <a>Select a Username</a>\n      <input type=\"text\" placeholder=\"Username\" value={avatar} onChange={e=>setAvatar(e.target.value)}></input>\n      <input type=\"text\" placeholder=\"Room\" value={room} onChange={e=>setRoom(e.target.value)}></input>\n      <button onClick={joinRoom}>Join Room</button>\n      <Chat avatarUser={avatar}/>\n      <Board users={players} avatar={avatar}/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/alex/Documents/Projects/Liars-Dice/client/src/chat.tsx",["43","44","45"],"import React, {useState, useRef, useEffect, FunctionComponent} from 'react';\r\nimport {socket} from './App';\r\nimport './chat.css';\r\n\r\ninterface ChatProps {\r\n    avatarUser: string ;\r\n}\r\n\r\n\r\nexport const Chat: React.FC<ChatProps> = (props:ChatProps) =>{\r\n    interface MyMessage {\r\n        avatar: string,\r\n        message:string\r\n    }\r\n\r\n    const [messages,setMessages] = useState<Array<MyMessage>>([]);\r\n    const [message,setMessage] = useState('');\r\n    const avatar = props.avatarUser;\r\n\r\n    const sendMessage = () =>{\r\n      socket.emit('chat',{avatar:avatar,message:message});\r\n      setMessage(\"\");\r\n      setMessages(prevState=>[...prevState,\r\n        {\r\n            avatar: avatar,\r\n            message: message\r\n        }])\r\n    }\r\n   \r\n    useEffect(()=>{\r\n        socket.on('chat',(data:MyMessage)=>{\r\n            setMessages(prevState=>[...prevState,\r\n            {\r\n                avatar: data.avatar,\r\n                message: data.message\r\n            }])\r\n        })\r\n    },[])\r\n\r\n    return(\r\n        <div className=\"main-chat\">\r\n            <h6>Chat:</h6>\r\n            <input type=\"text\" placeholder=\"Write Something\" value={message} onChange={e=>setMessage(e.target.value)}></input>\r\n            <button onClick={sendMessage}>Send</button>\r\n            {messages.map((messageUp,index)=>{\r\n                return(\r\n                <div key={`Key_${index}`}>\r\n                    <a>{messageUp.avatar}: {messageUp.message}</a>\r\n                    <br />\r\n                </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","/Users/alex/Documents/Projects/Liars-Dice/client/src/board.tsx",["46","47","48","49","50","51","52","53","54","55","56","57"],"import React, {useState, useEffect} from 'react';\nimport { socket } from './App';\nimport {Choices} from './choice'\nimport {Dices} from './dices'\nimport './board.css'\n\ninterface BoardProps {\n    users: string[],\n    avatar: string\n}\n\ninterface PreviousChoise{\n    choise: number,\n    numberDice: string\n}\n\nexport const Board: React.FC<BoardProps> = (props:BoardProps)=>{\n    const [ready,setReady] = useState<boolean>(false)\n    const [indexTurn,setIndexTurn] = useState<number>(-1)\n    const [currentPlayer,setCurrentPlayer] = useState<string>()\n    const [choise,setChoise] = useState<PreviousChoise>()\n    const [dices,setDices] = useState<Array<string>>([])\n\n    const readyGame = (avatar:string) =>{\n        setReady(true);\n        socket.emit('ready',{state:true,user:avatar});\n    }\n\n    const nextTurn = () =>{\n        if (indexTurn<props.users.length-1){\n            setIndexTurn(indexTurn + 1)\n        }else if (indexTurn==props.users.length-1){\n            setIndexTurn(0)\n        }\n    }\n\n    useEffect(()=>{\n        socket.on('turn',(readySteady:boolean)=>{\n            setIndexTurn(indexTurn + 1)\n        })\n        socket.on('nextPlay',(choisePlayer:{choise:PreviousChoise,player:string})=>{\n            setChoise(choisePlayer.choise)\n            setCurrentPlayer(choisePlayer.player)\n            if (indexTurn<props.users.length-1){\n                setIndexTurn(indexTurn + 1)\n            }else if(indexTurn==props.users.length-1){\n                setIndexTurn(0)\n            }\n        })\n        \n    },[indexTurn])\n\n    useEffect(()=>{\n        socket.on('dices',(dices:string[])=>{\n            setDices(dices)\n            console.log(dices)\n            socket.on('bluff',()=>{\n                //bluff\n                console.log('bluff')\n                socket.emit('handleBluff',dices)\n            })\n        })\n    },[])\n\n    return(\n    <div className='board'>\n        {props.users.map((user,index)=>{\n            return(\n                <div key={`Key_${index}`} className='board-player'>\n                    <a>{user}</a>\n                    <br />\n                    {(currentPlayer==user) ? (<div><a> Choise {choise?.choise}</a> <br /> <a>Dice {choise?.numberDice}</a></div>): null}\n                    <br />\n                    {(!ready && props.avatar==user) ? \n                    <button onClick={()=>readyGame(props.avatar)}>Ready</button> : \n                    (props.users[indexTurn]==props.avatar && props.users[indexTurn]==user) ? \n                    <div>\n                    <Choices user={props.avatar} nextTurn={nextTurn} prevChoise={choise}/>\n                    </div> : \n                    null}\n                    {(ready && props.avatar==user) ? \n                    <Dices dices={dices}/> : ready ? <a>Five Dices</a> : null}\n                </div>\n            )\n        })}\n    </div>)\n}","/Users/alex/Documents/Projects/Liars-Dice/client/src/choice.tsx",["58","59","60"],"import React, {Props, useEffect, useState} from 'react';\nimport {socket} from './App'\nimport {gameLogic,selectAvailability} from './gameLogic'\n\ninterface ChoiseProps{\n    user: string,\n    nextTurn: Function,\n    prevChoise: {choise:number , numberDice:string } | undefined\n}\n\nconst selectValues=['One','Two','Three','Four','Five','Six']\n\nexport const Choices: React.FC<ChoiseProps> = (props:ChoiseProps) =>{\n    const [choise,setChoise] = useState<number>(0); //Number of Dices\n    const [numberDice,setNumberDice] = useState<string>('') //Dices' Number\n    const [selection,setSelection] = useState<boolean>(false);\n    const [optionsNumberOfDice,setOptionsNumberOfDice] = useState<object>()\n    const [optionsDiceNumber,setOptionsDiceNumber] = useState<object>()\n    const [isBluff,setIsBluff] = useState<boolean>(false)\n\n    const handleSubmit = () =>{\n        setSelection(true)\n        socket.emit('next',{choise:{choise:choise, numberDice:numberDice}, player:props.user})\n        props.nextTurn();\n    }\n\n    const handleBluff = () =>{\n        setIsBluff(true)\n        setSelection(true)\n        console.log(props.prevChoise)\n        socket.emit('bluff',(props.prevChoise))\n        props.nextTurn()\n    }\n\n    useEffect(()=>{\n        setOptionsNumberOfDice(\n        ()=>{\n            let rtn = []\n            let bound:any = 0\n            let disable = false\n\n            if (typeof props.prevChoise!=='undefined'){\n                if (props.prevChoise.numberDice!=='Six'){\n                    bound = Math.floor(props.prevChoise.choise/2) + 1\n                } else {\n                    bound = props.prevChoise.choise + 1\n                }\n            }\n            if (numberDice!==''){\n                const availableChoises = gameLogic(props.prevChoise?.choise,props.prevChoise?.numberDice,numberDice)\n                if (typeof props.prevChoise!=='undefined'){\n                    bound = availableChoises\n                }\n            }   \n            for (var i=1; i<=20; i++){\n                disable = false\n                if (i<bound){\n                    disable = true\n                }\n                rtn.push(<option value={i} key={`Key_${i}`} disabled={disable}>{i}</option>)\n            }\n            return rtn\n        }\n        )\n        setOptionsDiceNumber(\n            selectValues.map((value,index)=>{\n                let available:boolean = true\n                if (choise!=0){\n                    if (typeof props.prevChoise!=='undefined'){\n                        available = selectAvailability(props.prevChoise.choise, choise,props.prevChoise.numberDice,value)\n                    }\n                }\n                return(<option value={value} disabled={!available} key={`Key_${index}`}>{value}</option>)\n            })\n        )\n    },[choise,numberDice])\n\n    return(<div>\n        {(!selection) ? (\n        <div>\n                <select id=\"select\" name=\"Number of Dices\" placeholder=\"Select\" defaultValue=\"Select\" onChange={e=>{setChoise(parseInt(e.target.value))}} required={!isBluff}>\n                    <option style={{display: \"none\"}}> -- Select Number -- </option>\n                    {optionsNumberOfDice}\n                </select>\n                <br />\n                <select id=\"select\" name=\"Dice Number\" placeholder=\"Select\" defaultValue=\"Select\" onChange={e=>{setNumberDice(e.target.value)}} required={!isBluff}>\n                    <option style={{display: \"none\"}}> -- Select Dice -- </option>\n                    {optionsDiceNumber}\n                </select>\n                <br />\n                <button onClick={handleSubmit}>Submit</button>\n                <button onClick={handleBluff}>Call bluff</button>\n        </div>)\n        : null}\n        </div>\n    )\n}","/Users/alex/Documents/Projects/Liars-Dice/client/src/gameLogic.tsx",["61","62","63"],"/Users/alex/Documents/Projects/Liars-Dice/client/src/dices.tsx",["64","65","66"],"import React, {useState,useEffect} from 'react'\n\ninterface DiceProps{\n    dices:string[]\n}\n\nexport const Dices:React.FC<DiceProps> = (props:DiceProps) =>{\n    return(<div>\n        {props.dices.map((dice,index)=>{\n            return(<a key={`Key_${index}`}>Dice {dice} <br/></a>)\n        })}\n    </div>)\n}",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":28,"column":7,"nodeType":"73","endLine":28,"endColumn":10},{"ruleId":"74","severity":1,"message":"75","line":1,"column":26,"nodeType":"76","messageId":"77","endLine":1,"endColumn":32},{"ruleId":"74","severity":1,"message":"78","line":1,"column":45,"nodeType":"76","messageId":"77","endLine":1,"endColumn":62},{"ruleId":"71","severity":1,"message":"72","line":48,"column":21,"nodeType":"73","endLine":48,"endColumn":24},{"ruleId":"79","severity":1,"message":"80","line":32,"column":28,"nodeType":"81","messageId":"82","endLine":32,"endColumn":30},{"ruleId":"79","severity":1,"message":"80","line":46,"column":31,"nodeType":"81","messageId":"82","endLine":46,"endColumn":33},{"ruleId":"83","severity":1,"message":"84","line":51,"column":7,"nodeType":"85","endLine":51,"endColumn":18,"suggestions":"86"},{"ruleId":"71","severity":1,"message":"72","line":70,"column":21,"nodeType":"73","endLine":70,"endColumn":24},{"ruleId":"79","severity":1,"message":"80","line":72,"column":36,"nodeType":"81","messageId":"82","endLine":72,"endColumn":38},{"ruleId":"71","severity":1,"message":"72","line":72,"column":52,"nodeType":"73","endLine":72,"endColumn":55},{"ruleId":"71","severity":1,"message":"72","line":72,"column":91,"nodeType":"73","endLine":72,"endColumn":94},{"ruleId":"79","severity":1,"message":"80","line":74,"column":45,"nodeType":"81","messageId":"82","endLine":74,"endColumn":47},{"ruleId":"79","severity":1,"message":"80","line":76,"column":44,"nodeType":"81","messageId":"82","endLine":76,"endColumn":46},{"ruleId":"79","severity":1,"message":"80","line":76,"column":84,"nodeType":"81","messageId":"82","endLine":76,"endColumn":86},{"ruleId":"79","severity":1,"message":"80","line":81,"column":44,"nodeType":"81","messageId":"82","endLine":81,"endColumn":46},{"ruleId":"71","severity":1,"message":"72","line":82,"column":54,"nodeType":"73","endLine":82,"endColumn":57},{"ruleId":"74","severity":1,"message":"87","line":1,"column":16,"nodeType":"76","messageId":"77","endLine":1,"endColumn":21},{"ruleId":"79","severity":1,"message":"88","line":68,"column":27,"nodeType":"81","messageId":"82","endLine":68,"endColumn":29},{"ruleId":"83","severity":1,"message":"89","line":76,"column":7,"nodeType":"85","endLine":76,"endColumn":26,"suggestions":"90"},{"ruleId":"79","severity":1,"message":"80","line":49,"column":16,"nodeType":"81","messageId":"82","endLine":49,"endColumn":18},{"ruleId":"79","severity":1,"message":"80","line":49,"column":26,"nodeType":"81","messageId":"82","endLine":49,"endColumn":28},{"ruleId":"79","severity":1,"message":"80","line":56,"column":16,"nodeType":"81","messageId":"82","endLine":56,"endColumn":18},{"ruleId":"74","severity":1,"message":"91","line":1,"column":16,"nodeType":"76","messageId":"77","endLine":1,"endColumn":24},{"ruleId":"74","severity":1,"message":"92","line":1,"column":25,"nodeType":"76","messageId":"77","endLine":1,"endColumn":34},{"ruleId":"71","severity":1,"message":"72","line":10,"column":20,"nodeType":"73","endLine":10,"endColumn":44},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'FunctionComponent' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.users.length'. Either include it or remove the dependency array.","ArrayExpression",["95"],"'Props' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'props.prevChoise'. Either include it or remove the dependency array. If 'setOptionsNumberOfDice' needs the current value of 'props.prevChoise', you can also switch to useReducer instead of useState and read 'props.prevChoise' in the reducer.",["96"],"'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [indexTurn, props.users.length]",{"range":"101","text":"102"},"Update the dependencies array to be: [choise, numberDice, props.prevChoise]",{"range":"103","text":"104"},[1519,1530],"[indexTurn, props.users.length]",[2775,2794],"[choise, numberDice, props.prevChoise]"]