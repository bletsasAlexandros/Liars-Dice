[{"/Users/alex/Documents/Projects/Liars-Dice/client/src/index.tsx":"1","/Users/alex/Documents/Projects/Liars-Dice/client/src/reportWebVitals.ts":"2","/Users/alex/Documents/Projects/Liars-Dice/client/src/App.tsx":"3","/Users/alex/Documents/Projects/Liars-Dice/client/src/chat.tsx":"4","/Users/alex/Documents/Projects/Liars-Dice/client/src/board.tsx":"5","/Users/alex/Documents/Projects/Liars-Dice/client/src/choice.tsx":"6","/Users/alex/Documents/Projects/Liars-Dice/client/src/gameLogic.tsx":"7"},{"size":500,"mtime":1608758791164,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1608758791165,"results":"10","hashOfConfig":"9"},{"size":1100,"mtime":1609072954049,"results":"11","hashOfConfig":"9"},{"size":1563,"mtime":1608921361122,"results":"12","hashOfConfig":"9"},{"size":2246,"mtime":1609256254107,"results":"13","hashOfConfig":"9"},{"size":3370,"mtime":1609353263268,"results":"14","hashOfConfig":"9"},{"size":1747,"mtime":1609353111598,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1442i3t",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/alex/Documents/Projects/Liars-Dice/client/src/index.tsx",[],["34","35"],"/Users/alex/Documents/Projects/Liars-Dice/client/src/reportWebVitals.ts",[],"/Users/alex/Documents/Projects/Liars-Dice/client/src/App.tsx",["36"],"import './App.css';\nimport {Chat} from './chat'\nimport {Board} from './board';\nimport React, {useState, useEffect} from 'react';\nimport io from \"socket.io-client\";\n\nexport const socket = io(\"http://localhost:4000\");\n\nfunction App() {\n  const [room,setRoom] = useState('Room');\n  const [avatar, setAvatar] = useState('Alex');\n  const [players, setPlayers] = useState<Array<string>>([]);\n\n  const joinRoom = () =>{\n    socket.emit('join-room',{roomName:room, user:avatar});\n    setRoom(\"\")\n  }\n\n  useEffect(()=>{\n    socket.on('join-room',(userInRoom:Array<string>)=>{\n      console.log(userInRoom);\n      setPlayers(userInRoom);\n    })\n  },[])\n\n  return (\n    <div className=\"App\">\n      <a>Select a Username</a>\n      <input type=\"text\" placeholder=\"Username\" value={avatar} onChange={e=>setAvatar(e.target.value)}></input>\n      <input type=\"text\" placeholder=\"Room\" value={room} onChange={e=>setRoom(e.target.value)}></input>\n      <button onClick={joinRoom}>Join Room</button>\n      <Chat avatarUser={avatar}/>\n      <Board users={players} avatar={avatar}/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/alex/Documents/Projects/Liars-Dice/client/src/chat.tsx",["37","38","39"],"import React, {useState, useRef, useEffect, FunctionComponent} from 'react';\r\nimport {socket} from './App';\r\nimport './chat.css';\r\n\r\ninterface ChatProps {\r\n    avatarUser: string ;\r\n}\r\n\r\n\r\nexport const Chat: React.FC<ChatProps> = (props:ChatProps) =>{\r\n    interface MyMessage {\r\n        avatar: string,\r\n        message:string\r\n    }\r\n\r\n    const [messages,setMessages] = useState<Array<MyMessage>>([]);\r\n    const [message,setMessage] = useState('');\r\n    const avatar = props.avatarUser;\r\n\r\n    const sendMessage = () =>{\r\n      socket.emit('chat',{avatar:avatar,message:message});\r\n      setMessage(\"\");\r\n      setMessages(prevState=>[...prevState,\r\n        {\r\n            avatar: avatar,\r\n            message: message\r\n        }])\r\n    }\r\n   \r\n    useEffect(()=>{\r\n        socket.on('chat',(data:MyMessage)=>{\r\n            setMessages(prevState=>[...prevState,\r\n            {\r\n                avatar: data.avatar,\r\n                message: data.message\r\n            }])\r\n        })\r\n    },[])\r\n\r\n    return(\r\n        <div className=\"main-chat\">\r\n            <h6>Chat:</h6>\r\n            <input type=\"text\" placeholder=\"Write Something\" value={message} onChange={e=>setMessage(e.target.value)}></input>\r\n            <button onClick={sendMessage}>Send</button>\r\n            {messages.map((messageUp,index)=>{\r\n                return(\r\n                <div key={`Key_${index}`}>\r\n                    <a>{messageUp.avatar}: {messageUp.message}</a>\r\n                    <br />\r\n                </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","/Users/alex/Documents/Projects/Liars-Dice/client/src/board.tsx",["40","41","42","43","44","45","46","47","48","49"],"import React, {useState, useEffect} from 'react';\nimport { socket } from './App';\nimport {Choices} from './choice'\nimport './board.css'\n\ninterface BoardProps {\n    users: string[],\n    avatar: string\n}\n\ninterface PreviousChoise{\n    choise: number,\n    numberDice: string\n}\n\nexport const Board: React.FC<BoardProps> = (props:BoardProps)=>{\n    const [ready,setReady] = useState<boolean>(false)\n    const [indexTurn,setIndexTurn] = useState<number>(-1)\n    const [currentPlayer,setCurrentPlayer] = useState<string>()\n    const [choise,setChoise] = useState<PreviousChoise>()\n\n    const readyGame = (avatar:string) =>{\n        setReady(true);\n        socket.emit('ready',{state:true,user:avatar});\n    }\n\n    const nextTurn = () =>{\n        if (indexTurn<props.users.length-1){\n            setIndexTurn(indexTurn + 1)\n        }else if (indexTurn==props.users.length-1){\n            setIndexTurn(0)\n        }\n    }\n\n    useEffect(()=>{\n        socket.on('turn',(readySteady:boolean)=>{\n            setIndexTurn(indexTurn + 1)\n        })\n        socket.on('nextPlay',(choisePlayer:{choise:PreviousChoise,player:string})=>{\n            setChoise(choisePlayer.choise)\n            setCurrentPlayer(choisePlayer.player)\n            if (indexTurn<props.users.length-1){\n                setIndexTurn(indexTurn + 1)\n            }else if(indexTurn==props.users.length-1){\n                setIndexTurn(0)\n            }\n        })\n    },[indexTurn])\n\n    return(\n    <div className='board'>\n        {props.users.map((user,index)=>{\n            return(\n                <div key={`Key_${index}`} className='board-player'>\n                    <a>{user}</a>\n                    <br />\n                    {(currentPlayer==user) ? (<div><a> Choise {choise?.choise}</a> <br /> <a>Dice {choise?.numberDice}</a></div>): null}\n                    <br />\n                    {(!ready && props.avatar==user) ? \n                    <button onClick={()=>readyGame(props.avatar)}>Ready</button> : \n                    (props.users[indexTurn]==props.avatar && props.users[indexTurn]==user) ? \n                    <Choices user={props.avatar} nextTurn={nextTurn} prevChoise={choise}/> : \n                    null}\n                </div>\n            )\n        })}\n    </div>)\n}","/Users/alex/Documents/Projects/Liars-Dice/client/src/choice.tsx",["50","51"],"/Users/alex/Documents/Projects/Liars-Dice/client/src/gameLogic.tsx",["52","53","54","55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":28,"column":7,"nodeType":"62","endLine":28,"endColumn":10},{"ruleId":"63","severity":1,"message":"64","line":1,"column":26,"nodeType":"65","messageId":"66","endLine":1,"endColumn":32},{"ruleId":"63","severity":1,"message":"67","line":1,"column":45,"nodeType":"65","messageId":"66","endLine":1,"endColumn":62},{"ruleId":"60","severity":1,"message":"61","line":48,"column":21,"nodeType":"62","endLine":48,"endColumn":24},{"ruleId":"68","severity":1,"message":"69","line":30,"column":28,"nodeType":"70","messageId":"71","endLine":30,"endColumn":30},{"ruleId":"68","severity":1,"message":"69","line":44,"column":31,"nodeType":"70","messageId":"71","endLine":44,"endColumn":33},{"ruleId":"72","severity":1,"message":"73","line":48,"column":7,"nodeType":"74","endLine":48,"endColumn":18,"suggestions":"75"},{"ruleId":"60","severity":1,"message":"61","line":55,"column":21,"nodeType":"62","endLine":55,"endColumn":24},{"ruleId":"68","severity":1,"message":"69","line":57,"column":36,"nodeType":"70","messageId":"71","endLine":57,"endColumn":38},{"ruleId":"60","severity":1,"message":"61","line":57,"column":52,"nodeType":"62","endLine":57,"endColumn":55},{"ruleId":"60","severity":1,"message":"61","line":57,"column":91,"nodeType":"62","endLine":57,"endColumn":94},{"ruleId":"68","severity":1,"message":"69","line":59,"column":45,"nodeType":"70","messageId":"71","endLine":59,"endColumn":47},{"ruleId":"68","severity":1,"message":"69","line":61,"column":44,"nodeType":"70","messageId":"71","endLine":61,"endColumn":46},{"ruleId":"68","severity":1,"message":"69","line":61,"column":84,"nodeType":"70","messageId":"71","endLine":61,"endColumn":86},{"ruleId":"68","severity":1,"message":"76","line":60,"column":27,"nodeType":"70","messageId":"71","endLine":60,"endColumn":29},{"ruleId":"72","severity":1,"message":"77","line":68,"column":7,"nodeType":"74","endLine":68,"endColumn":26,"suggestions":"78"},{"ruleId":"68","severity":1,"message":"69","line":39,"column":18,"nodeType":"70","messageId":"71","endLine":39,"endColumn":20},{"ruleId":"68","severity":1,"message":"69","line":49,"column":16,"nodeType":"70","messageId":"71","endLine":49,"endColumn":18},{"ruleId":"68","severity":1,"message":"69","line":49,"column":26,"nodeType":"70","messageId":"71","endLine":49,"endColumn":28},{"ruleId":"68","severity":1,"message":"69","line":56,"column":16,"nodeType":"70","messageId":"71","endLine":56,"endColumn":18},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'FunctionComponent' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.users.length'. Either include it or remove the dependency array.","ArrayExpression",["81"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'props.prevChoise'. Either include it or remove the dependency array. If 'setOptionsNumberOfDice' needs the current value of 'props.prevChoise', you can also switch to useReducer instead of useState and read 'props.prevChoise' in the reducer.",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [indexTurn, props.users.length]",{"range":"87","text":"88"},"Update the dependencies array to be: [choise, numberDice, props.prevChoise]",{"range":"89","text":"90"},[1423,1434],"[indexTurn, props.users.length]",[2526,2545],"[choise, numberDice, props.prevChoise]"]